/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.Keys;
import gov.epa.bencloud.server.database.jooq.data.tables.records.TaskBatchRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskBatch extends TableImpl<TaskBatchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.task_batch</code>
     */
    public static final TaskBatch TASK_BATCH = new TaskBatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskBatchRecord> getRecordType() {
        return TaskBatchRecord.class;
    }

    /**
     * The column <code>data.task_batch.id</code>.
     */
    public final TableField<TaskBatchRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.task_batch.name</code>.
     */
    public final TableField<TaskBatchRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_batch.parameters</code>.
     */
    public final TableField<TaskBatchRecord, String> PARAMETERS = createField(DSL.name("parameters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_batch.user_id</code>.
     */
    public final TableField<TaskBatchRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_batch.sharing_scope</code>.
     */
    public final TableField<TaskBatchRecord, Short> SHARING_SCOPE = createField(DSL.name("sharing_scope"), SQLDataType.SMALLINT.defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "");

    private TaskBatch(Name alias, Table<TaskBatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskBatch(Name alias, Table<TaskBatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.task_batch</code> table reference
     */
    public TaskBatch(String alias) {
        this(DSL.name(alias), TASK_BATCH);
    }

    /**
     * Create an aliased <code>data.task_batch</code> table reference
     */
    public TaskBatch(Name alias) {
        this(alias, TASK_BATCH);
    }

    /**
     * Create a <code>data.task_batch</code> table reference
     */
    public TaskBatch() {
        this(DSL.name("task_batch"), null);
    }

    public <O extends Record> TaskBatch(Table<O> child, ForeignKey<O, TaskBatchRecord> key) {
        super(child, key, TASK_BATCH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public Identity<TaskBatchRecord, Integer> getIdentity() {
        return (Identity<TaskBatchRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskBatchRecord> getPrimaryKey() {
        return Keys.TASK_BATCH_PK;
    }

    @Override
    public TaskBatch as(String alias) {
        return new TaskBatch(DSL.name(alias), this);
    }

    @Override
    public TaskBatch as(Name alias) {
        return new TaskBatch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskBatch rename(String name) {
        return new TaskBatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskBatch rename(Name name) {
        return new TaskBatch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
