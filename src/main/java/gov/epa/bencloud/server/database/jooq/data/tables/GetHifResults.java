/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.tables.records.GetHifResultsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetHifResults extends TableImpl<GetHifResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.get_hif_results</code>
     */
    public static final GetHifResults GET_HIF_RESULTS = new GetHifResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetHifResultsRecord> getRecordType() {
        return GetHifResultsRecord.class;
    }

    /**
     * The column <code>data.get_hif_results.grid_col</code>.
     */
    public final TableField<GetHifResultsRecord, Integer> GRID_COL = createField(DSL.name("grid_col"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.get_hif_results.grid_row</code>.
     */
    public final TableField<GetHifResultsRecord, Integer> GRID_ROW = createField(DSL.name("grid_row"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.get_hif_results.hif_id</code>.
     */
    public final TableField<GetHifResultsRecord, Integer> HIF_ID = createField(DSL.name("hif_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.get_hif_results.point_estimate</code>.
     */
    public final TableField<GetHifResultsRecord, Double> POINT_ESTIMATE = createField(DSL.name("point_estimate"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.population</code>.
     */
    public final TableField<GetHifResultsRecord, Double> POPULATION = createField(DSL.name("population"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.baseline_aq</code>.
     */
    public final TableField<GetHifResultsRecord, Double> BASELINE_AQ = createField(DSL.name("baseline_aq"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.scenario_aq</code>.
     */
    public final TableField<GetHifResultsRecord, Double> SCENARIO_AQ = createField(DSL.name("scenario_aq"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.delta_aq</code>.
     */
    public final TableField<GetHifResultsRecord, Double> DELTA_AQ = createField(DSL.name("delta_aq"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.incidence</code>.
     */
    public final TableField<GetHifResultsRecord, Double> INCIDENCE = createField(DSL.name("incidence"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.mean</code>.
     */
    public final TableField<GetHifResultsRecord, Double> MEAN = createField(DSL.name("mean"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.baseline</code>.
     */
    public final TableField<GetHifResultsRecord, Double> BASELINE = createField(DSL.name("baseline"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.standard_dev</code>.
     */
    public final TableField<GetHifResultsRecord, Double> STANDARD_DEV = createField(DSL.name("standard_dev"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.variance</code>.
     */
    public final TableField<GetHifResultsRecord, Double> VARIANCE = createField(DSL.name("variance"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.pct_2_5</code>.
     */
    public final TableField<GetHifResultsRecord, Double> PCT_2_5 = createField(DSL.name("pct_2_5"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.pct_97_5</code>.
     */
    public final TableField<GetHifResultsRecord, Double> PCT_97_5 = createField(DSL.name("pct_97_5"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>data.get_hif_results.percentiles</code>.
     */
    public final TableField<GetHifResultsRecord, Double[]> PERCENTILES = createField(DSL.name("percentiles"), SQLDataType.FLOAT.getArrayDataType(), this, "");

    private GetHifResults(Name alias, Table<GetHifResultsRecord> aliased) {
        this(alias, aliased, new Field[3]);
    }

    private GetHifResults(Name alias, Table<GetHifResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>data.get_hif_results</code> table reference
     */
    public GetHifResults(String alias) {
        this(DSL.name(alias), GET_HIF_RESULTS);
    }

    /**
     * Create an aliased <code>data.get_hif_results</code> table reference
     */
    public GetHifResults(Name alias) {
        this(alias, GET_HIF_RESULTS);
    }

    /**
     * Create a <code>data.get_hif_results</code> table reference
     */
    public GetHifResults() {
        this(DSL.name("get_hif_results"), null);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public GetHifResults as(String alias) {
        return new GetHifResults(DSL.name(alias), this, parameters);
    }

    @Override
    public GetHifResults as(Name alias) {
        return new GetHifResults(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetHifResults rename(String name) {
        return new GetHifResults(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetHifResults rename(Name name) {
        return new GetHifResults(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, Integer, Integer, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double[]> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetHifResults call(
          Integer _DatasetId
        , Integer[] _HifId
        , Integer _OutputGridDefinitionId
    ) {
        GetHifResults result = new GetHifResults(DSL.name("get_hif_results"), null, new Field[] {
              DSL.val(_DatasetId, SQLDataType.INTEGER)
            , DSL.val(_HifId, SQLDataType.INTEGER.getArrayDataType())
            , DSL.val(_OutputGridDefinitionId, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetHifResults call(
          Field<Integer> _DatasetId
        , Field<Integer[]> _HifId
        , Field<Integer> _OutputGridDefinitionId
    ) {
        GetHifResults result = new GetHifResults(DSL.name("get_hif_results"), null, new Field[] {
              _DatasetId
            , _HifId
            , _OutputGridDefinitionId
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
