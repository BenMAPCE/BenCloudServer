/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.Keys;
import gov.epa.bencloud.server.database.jooq.data.tables.records.TaskConfigRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskConfig extends TableImpl<TaskConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.task_config</code>
     */
    public static final TaskConfig TASK_CONFIG = new TaskConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskConfigRecord> getRecordType() {
        return TaskConfigRecord.class;
    }

    /**
     * The column <code>data.task_config.id</code>.
     */
    public final TableField<TaskConfigRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.task_config.name</code>.
     */
    public final TableField<TaskConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_config.type</code>.
     */
    public final TableField<TaskConfigRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_config.parameters</code>.
     */
    public final TableField<TaskConfigRecord, JSON> PARAMETERS = createField(DSL.name("parameters"), SQLDataType.JSON, this, "");

    private TaskConfig(Name alias, Table<TaskConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskConfig(Name alias, Table<TaskConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.task_config</code> table reference
     */
    public TaskConfig(String alias) {
        this(DSL.name(alias), TASK_CONFIG);
    }

    /**
     * Create an aliased <code>data.task_config</code> table reference
     */
    public TaskConfig(Name alias) {
        this(alias, TASK_CONFIG);
    }

    /**
     * Create a <code>data.task_config</code> table reference
     */
    public TaskConfig() {
        this(DSL.name("task_config"), null);
    }

    public <O extends Record> TaskConfig(Table<O> child, ForeignKey<O, TaskConfigRecord> key) {
        super(child, key, TASK_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public Identity<TaskConfigRecord, Integer> getIdentity() {
        return (Identity<TaskConfigRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskConfigRecord> getPrimaryKey() {
        return Keys.TASK_CONFIG_DATASET_PKEY;
    }

    @Override
    public TaskConfig as(String alias) {
        return new TaskConfig(DSL.name(alias), this);
    }

    @Override
    public TaskConfig as(Name alias) {
        return new TaskConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskConfig rename(String name) {
        return new TaskConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskConfig rename(Name name) {
        return new TaskConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
