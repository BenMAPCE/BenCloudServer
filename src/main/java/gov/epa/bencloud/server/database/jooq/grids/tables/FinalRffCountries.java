/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.grids.tables;


import gov.epa.bencloud.server.database.jooq.grids.Grids;
import gov.epa.bencloud.server.database.jooq.grids.Indexes;
import gov.epa.bencloud.server.database.jooq.grids.Keys;
import gov.epa.bencloud.server.database.jooq.grids.tables.records.FinalRffCountriesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinalRffCountries extends TableImpl<FinalRffCountriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>grids.final_rff_countries</code>
     */
    public static final FinalRffCountries FINAL_RFF_COUNTRIES = new FinalRffCountries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinalRffCountriesRecord> getRecordType() {
        return FinalRffCountriesRecord.class;
    }

    /**
     * The column <code>grids.final_rff_countries.gid</code>.
     */
    public final TableField<FinalRffCountriesRecord, Integer> GID = createField(DSL.name("gid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>grids.final_rff_countries.objectid</code>.
     */
    public final TableField<FinalRffCountriesRecord, Long> OBJECTID = createField(DSL.name("objectid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>grids.final_rff_countries.country</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>grids.final_rff_countries.iso</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> ISO = createField(DSL.name("iso"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>grids.final_rff_countries.countryaff</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> COUNTRYAFF = createField(DSL.name("countryaff"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>grids.final_rff_countries.aff_iso</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> AFF_ISO = createField(DSL.name("aff_iso"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>grids.final_rff_countries.country_na</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> COUNTRY_NA = createField(DSL.name("country_na"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.official_s</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> OFFICIAL_S = createField(DSL.name("official_s"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.sovereignt</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> SOVEREIGNT = createField(DSL.name("sovereignt"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.alpha_3_co</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> ALPHA_3_CO = createField(DSL.name("alpha_3_co"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.numeric_co</code>.
     */
    public final TableField<FinalRffCountriesRecord, Long> NUMERIC_CO = createField(DSL.name("numeric_co"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>grids.final_rff_countries.subdivisio</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> SUBDIVISIO = createField(DSL.name("subdivisio"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.internet_c</code>.
     */
    public final TableField<FinalRffCountriesRecord, String> INTERNET_C = createField(DSL.name("internet_c"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>grids.final_rff_countries.col</code>.
     */
    public final TableField<FinalRffCountriesRecord, Long> COL = createField(DSL.name("col"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>grids.final_rff_countries.row</code>.
     */
    public final TableField<FinalRffCountriesRecord, Long> ROW = createField(DSL.name("row"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>grids.final_rff_countries.shape_leng</code>.
     */
    public final TableField<FinalRffCountriesRecord, BigDecimal> SHAPE_LENG = createField(DSL.name("shape_leng"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>grids.final_rff_countries.shape_area</code>.
     */
    public final TableField<FinalRffCountriesRecord, BigDecimal> SHAPE_AREA = createField(DSL.name("shape_area"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>grids.final_rff_countries.country_ar</code>.
     */
    public final TableField<FinalRffCountriesRecord, BigDecimal> COUNTRY_AR = createField(DSL.name("country_ar"), SQLDataType.NUMERIC, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link
     * org.jooq.Binding} to specify how this type should be handled. Deprecation
     * can be turned off using {@literal <deprecationOnUnknownTypes/>} in your
     * code generator configuration.
     */
    @Deprecated
    public final TableField<FinalRffCountriesRecord, Object> GEOM = createField(DSL.name("geom"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    private FinalRffCountries(Name alias, Table<FinalRffCountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FinalRffCountries(Name alias, Table<FinalRffCountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>grids.final_rff_countries</code> table reference
     */
    public FinalRffCountries(String alias) {
        this(DSL.name(alias), FINAL_RFF_COUNTRIES);
    }

    /**
     * Create an aliased <code>grids.final_rff_countries</code> table reference
     */
    public FinalRffCountries(Name alias) {
        this(alias, FINAL_RFF_COUNTRIES);
    }

    /**
     * Create a <code>grids.final_rff_countries</code> table reference
     */
    public FinalRffCountries() {
        this(DSL.name("final_rff_countries"), null);
    }

    public <O extends Record> FinalRffCountries(Table<O> child, ForeignKey<O, FinalRffCountriesRecord> key) {
        super(child, key, FINAL_RFF_COUNTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Grids.GRIDS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FINAL_RFF_COUNTRIES_GEOM_IDX);
    }

    @Override
    public Identity<FinalRffCountriesRecord, Integer> getIdentity() {
        return (Identity<FinalRffCountriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FinalRffCountriesRecord> getPrimaryKey() {
        return Keys.FINAL_RFF_COUNTRIES_PKEY;
    }

    @Override
    public FinalRffCountries as(String alias) {
        return new FinalRffCountries(DSL.name(alias), this);
    }

    @Override
    public FinalRffCountries as(Name alias) {
        return new FinalRffCountries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinalRffCountries rename(String name) {
        return new FinalRffCountries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinalRffCountries rename(Name name) {
        return new FinalRffCountries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, Long, String, String, String, String, String, String, String, String, Long, String, String, Long, Long, BigDecimal, BigDecimal, BigDecimal, Object> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
