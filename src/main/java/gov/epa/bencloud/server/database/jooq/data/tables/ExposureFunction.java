/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.Keys;
import gov.epa.bencloud.server.database.jooq.data.tables.records.ExposureFunctionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExposureFunction extends TableImpl<ExposureFunctionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.exposure_function</code>
     */
    public static final ExposureFunction EXPOSURE_FUNCTION = new ExposureFunction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExposureFunctionRecord> getRecordType() {
        return ExposureFunctionRecord.class;
    }

    /**
     * The column <code>data.exposure_function.id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.exposure_function.exposure_dataset_id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> EXPOSURE_DATASET_ID = createField(DSL.name("exposure_dataset_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.population_group</code>.
     */
    public final TableField<ExposureFunctionRecord, String> POPULATION_GROUP = createField(DSL.name("population_group"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.exposure_function.race_id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> RACE_ID = createField(DSL.name("race_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.ethnicity_id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> ETHNICITY_ID = createField(DSL.name("ethnicity_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.gender_id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.start_age</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> START_AGE = createField(DSL.name("start_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.end_age</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> END_AGE = createField(DSL.name("end_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.variable_id</code>.
     */
    public final TableField<ExposureFunctionRecord, Integer> VARIABLE_ID = createField(DSL.name("variable_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.exposure_function.function_text</code>.
     */
    public final TableField<ExposureFunctionRecord, String> FUNCTION_TEXT = createField(DSL.name("function_text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.exposure_function.generate_complement</code>.
     */
    public final TableField<ExposureFunctionRecord, Boolean> GENERATE_COMPLEMENT = createField(DSL.name("generate_complement"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>data.exposure_function.complement_name</code>.
     */
    public final TableField<ExposureFunctionRecord, String> COMPLEMENT_NAME = createField(DSL.name("complement_name"), SQLDataType.CLOB, this, "");

    private ExposureFunction(Name alias, Table<ExposureFunctionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExposureFunction(Name alias, Table<ExposureFunctionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.exposure_function</code> table reference
     */
    public ExposureFunction(String alias) {
        this(DSL.name(alias), EXPOSURE_FUNCTION);
    }

    /**
     * Create an aliased <code>data.exposure_function</code> table reference
     */
    public ExposureFunction(Name alias) {
        this(alias, EXPOSURE_FUNCTION);
    }

    /**
     * Create a <code>data.exposure_function</code> table reference
     */
    public ExposureFunction() {
        this(DSL.name("exposure_function"), null);
    }

    public <O extends Record> ExposureFunction(Table<O> child, ForeignKey<O, ExposureFunctionRecord> key) {
        super(child, key, EXPOSURE_FUNCTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public Identity<ExposureFunctionRecord, Integer> getIdentity() {
        return (Identity<ExposureFunctionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExposureFunctionRecord> getPrimaryKey() {
        return Keys.EXPOSURE_FUNCTION_PKEY;
    }

    @Override
    public ExposureFunction as(String alias) {
        return new ExposureFunction(DSL.name(alias), this);
    }

    @Override
    public ExposureFunction as(Name alias) {
        return new ExposureFunction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExposureFunction rename(String name) {
        return new ExposureFunction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExposureFunction rename(Name name) {
        return new ExposureFunction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, String, Integer, Integer, Integer, Integer, Integer, Integer, String, Boolean, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
