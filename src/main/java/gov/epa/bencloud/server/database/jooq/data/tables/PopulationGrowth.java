/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.Indexes;
import gov.epa.bencloud.server.database.jooq.data.Keys;
import gov.epa.bencloud.server.database.jooq.data.tables.records.PopulationGrowthRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PopulationGrowth extends TableImpl<PopulationGrowthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.population_growth</code>
     */
    public static final PopulationGrowth POPULATION_GROWTH = new PopulationGrowth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PopulationGrowthRecord> getRecordType() {
        return PopulationGrowthRecord.class;
    }

    /**
     * The column <code>data.population_growth.base_pop_year</code>.
     */
    public final TableField<PopulationGrowthRecord, Short> BASE_POP_YEAR = createField(DSL.name("base_pop_year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.pop_year</code>.
     */
    public final TableField<PopulationGrowthRecord, Short> POP_YEAR = createField(DSL.name("pop_year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.race_id</code>.
     */
    public final TableField<PopulationGrowthRecord, Integer> RACE_ID = createField(DSL.name("race_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.gender_id</code>.
     */
    public final TableField<PopulationGrowthRecord, Integer> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.ethnicity_id</code>.
     */
    public final TableField<PopulationGrowthRecord, Integer> ETHNICITY_ID = createField(DSL.name("ethnicity_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.age_range_id</code>.
     */
    public final TableField<PopulationGrowthRecord, Integer> AGE_RANGE_ID = createField(DSL.name("age_range_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.grid_cell_id</code>.
     */
    public final TableField<PopulationGrowthRecord, Integer> GRID_CELL_ID = createField(DSL.name("grid_cell_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>data.population_growth.growth_value</code>.
     */
    public final TableField<PopulationGrowthRecord, Double> GROWTH_VALUE = createField(DSL.name("growth_value"), SQLDataType.DOUBLE, this, "");

    private PopulationGrowth(Name alias, Table<PopulationGrowthRecord> aliased) {
        this(alias, aliased, null);
    }

    private PopulationGrowth(Name alias, Table<PopulationGrowthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.population_growth</code> table reference
     */
    public PopulationGrowth(String alias) {
        this(DSL.name(alias), POPULATION_GROWTH);
    }

    /**
     * Create an aliased <code>data.population_growth</code> table reference
     */
    public PopulationGrowth(Name alias) {
        this(alias, POPULATION_GROWTH);
    }

    /**
     * Create a <code>data.population_growth</code> table reference
     */
    public PopulationGrowth() {
        this(DSL.name("population_growth"), null);
    }

    public <O extends Record> PopulationGrowth(Table<O> child, ForeignKey<O, PopulationGrowthRecord> key) {
        super(child, key, POPULATION_GROWTH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POPULATION_GROWTH_BASE_POP_YEAR_IDX, Indexes.POPULATION_GROWTH_RACE_ETHNICITY_GRID_AGE_GENDER_IDX, Indexes.POPULATION_GROWTH_RACE_ETHNICITY_GRID_IDX);
    }

    @Override
    public UniqueKey<PopulationGrowthRecord> getPrimaryKey() {
        return Keys.POPULATION_GROWTH_PK;
    }

    @Override
    public PopulationGrowth as(String alias) {
        return new PopulationGrowth(DSL.name(alias), this);
    }

    @Override
    public PopulationGrowth as(Name alias) {
        return new PopulationGrowth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PopulationGrowth rename(String name) {
        return new PopulationGrowth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PopulationGrowth rename(Name name) {
        return new PopulationGrowth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Short, Short, Integer, Integer, Integer, Integer, Integer, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
