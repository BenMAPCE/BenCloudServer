stages:
  - test
  - code_build
  - image_build
  - defender
  - image_scan
  - deploy_nonprod

include:
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

# Build the server and taskrunner jar files for the current environment
build_dev_jars:
  stage: code_build
  only: 
    - develop
  image: gradle:jdk17-corretto
  tags:
    - benmapdevgitlab
  script:
    - gradle shadowJar
    - cp build/libs/BenCloudServer.jar BenCloudServer.jar
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - BenCloudServer.jar
      - bencloud-server.properties

build_stage_jars:
  stage: code_build
  only:
    - tags
  image: gradle:jdk17-corretto
  tags:
    - benmapstagegitlab
  script:
    - gradle shadowJar
    - cp build/libs/BenCloudServer.jar BenCloudServer.jar
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - BenCloudServer.jar
      - bencloud-server.properties

# Build docker images for the current environment (one each for server and task runner)

build_dev_server_image:
  stage: image_build
  only: 
    - develop
  tags:
    - benmapdevgitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudserver/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_SHORT_SHA
  dependencies:
    - build_dev_jars

build_stage_server_image:
  stage: image_build
  only:
    - tags
  tags:
    - benmapstagegitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudserver/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_TAG
  dependencies:
    - build_stage_jars

build_dev_runner_image:
  stage: image_build
  only: 
    - develop
  tags:
    - benmapdevgitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudtaskrunner/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_SHORT_SHA
  dependencies:
    - build_dev_jars

build_stage_runner_image:
  stage: image_build
  only:
    - tags
  tags:
    - benmapstagegitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudtaskrunner/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_TAG
  dependencies:
    - build_stage_jars

# Add prisma defender to each docker image build for current environment
add_dev_server_defender:
  stage: defender
  only: 
    - develop
  tags:
    - benmapdevgitlab
  image:
    name: registry.epa.gov/dso/kaniko-plus:89b76f7b
    entrypoint: [""]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/bencloudserver
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    ENTRYPOINT_COMMAND: "java -Xms16G -Xmx20G -XX:+UseG1GC -XX:MaxMetaspaceSize=1G -jar /bencloud/BenCloudServer.jar"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - git clone --depth 1 --branch 0.2.0 https://gitlab.epa.gov/dso/defender.git
    - /kaniko/executor --context $CI_PROJECT_DIR/defender --dockerfile $CI_PROJECT_DIR/docker/defender/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_SHORT_SHA --build-arg "IMAGE=${IMAGE}" --build-arg "IMAGE_TAG=${IMAGE_TAG}" --build-arg "ENTRYPOINT_COMMAND=${ENTRYPOINT_COMMAND}"

add_stage_server_defender:
  stage: defender
  only: 
    - tags
  tags:
    - benmapdevgitlab
  image:
    name: registry.epa.gov/dso/kaniko-plus:89b76f7b
    entrypoint: [""]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/bencloudserver
    IMAGE_TAG: $CI_COMMIT_TAG
    ENTRYPOINT_COMMAND: "java -Xms16G -Xmx20G -XX:+UseG1GC -XX:MaxMetaspaceSize=1G -jar /bencloud/BenCloudServer.jar"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - git clone --depth 1 --branch 0.2.0 https://gitlab.epa.gov/dso/defender.git
    - /kaniko/executor --context $CI_PROJECT_DIR/defender --dockerfile $CI_PROJECT_DIR/docker/defender/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_TAG --build-arg "IMAGE=${IMAGE}" --build-arg "IMAGE_TAG=${IMAGE_TAG}" --build-arg "ENTRYPOINT_COMMAND=${ENTRYPOINT_COMMAND}"

add_dev_taskrunner_defender:
  stage: defender
  only: 
    - develop
  tags:
    - benmapdevgitlab
  image:
    name: registry.epa.gov/dso/kaniko-plus:89b76f7b
    entrypoint: [""]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/bencloudtaskrunner
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    FILESYSTEM_MONITORING: "false"
    FIPS_ENABLED: "false"
    ENTRYPOINT_COMMAND: "java -Xms16G -Xmx20G -XX:+UseG1GC -XX:MaxMetaspaceSize=1G -cp /bencloud/BenCloudServer.jar gov.epa.bencloud.server.BenCloudTaskRunner"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - git clone --depth 1 --branch 0.2.0 https://gitlab.epa.gov/dso/defender.git
    - /kaniko/executor --context $CI_PROJECT_DIR/defender --dockerfile $CI_PROJECT_DIR/docker/defender/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_SHORT_SHA --build-arg "IMAGE=${IMAGE}" --build-arg "IMAGE_TAG=${IMAGE_TAG}" --build-arg "ENTRYPOINT_COMMAND=${ENTRYPOINT_COMMAND}"

add_stage_taskrunner_defender:
  stage: defender
  only: 
    - tags
  tags:
    - benmapdevgitlab
  image:
    name: registry.epa.gov/dso/kaniko-plus:89b76f7b
    entrypoint: [""]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/bencloudtaskrunner
    IMAGE_TAG: $CI_COMMIT_TAG
    FILESYSTEM_MONITORING: "true"
    FIPS_ENABLED: "false"
    ENTRYPOINT_COMMAND: "java -Xms16G -Xmx20G -XX:+UseG1GC -XX:MaxMetaspaceSize=1G -cp /bencloud/BenCloudServer.jar gov.epa.bencloud.server.BenCloudTaskRunner"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - git clone --depth 1 --branch 0.2.0 https://gitlab.epa.gov/dso/defender.git
    - /kaniko/executor --context $CI_PROJECT_DIR/defender --dockerfile $CI_PROJECT_DIR/docker/defender/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_TAG --build-arg "IMAGE=${IMAGE}" --build-arg "IMAGE_TAG=${IMAGE_TAG}" --build-arg "ENTRYPOINT_COMMAND=${ENTRYPOINT_COMMAND}"

# Run prisma scan against newly created server and task runner images for current environment
prisma_cloud_compute_scan_nonprod:
  stage: image_scan
  only: 
    - develop
  tags:
    - twistcli
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$PRISMA_CI_USERNAME\", \"password\":\"$PRISMA_CI_PASSWORD\"}" https://prismacloud.epa.gov/api/v32.01/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Scan undefended images
    - docker pull $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_SHORT_SHA
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_SHORT_SHA

    - docker pull $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_SHORT_SHA
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_SHORT_SHA

# Scan defended images
    - docker pull $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_SHORT_SHA
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_SHORT_SHA

    - docker pull $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_SHORT_SHA
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_SHORT_SHA

  after_script:
    # Cleanup the above space use on Runner.
    - rm -rf $CI_PROJECT_DIR 

prisma_cloud_compute_scan_prod:
  stage: image_scan
  only: 
    - tags
  tags:
    - twistcli
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$PRISMA_CI_USERNAME\", \"password\":\"$PRISMA_CI_PASSWORD\"}" https://prismacloud.epa.gov/api/v32.01/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# Scan undefended images
    - docker pull $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_TAG
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_TAG

    - docker pull $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_TAG
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_TAG

# Scan defended images
    - docker pull $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_TAG
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudserver-defender:$CI_COMMIT_TAG

    - docker pull $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_TAG
    - ./twistcli images scan --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN $CI_REGISTRY_IMAGE/bencloudtaskrunner-defender:$CI_COMMIT_TAG

  after_script:
    # Cleanup the above space use on Runner.
    - rm -rf $CI_PROJECT_DIR 

# Deploy server image for current environment. (Task runner image is used to create k8s jobs on demand.)
deploy_testdev:
  stage: deploy_nonprod
  only: 
    - develop
  tags:
    - benmapdevgitlab
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config use-context "$KUBE_CONTEXT"
    - envsubst < k8s/bencloud-dev-server.yml | kubectl apply --validate=false -f -
  environment:
    name: testdev
    url: https://dev.bencloud-dev.aws.epa.gov/api
    kubernetes:
      namespace: benmap-dev

deploy_staging:
  stage: deploy_nonprod
  only:
    - tags
  tags:
    - benmapstagegitlab
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config use-context "$KUBE_CONTEXT"
    - envsubst < k8s/bencloud-stage-server.yml | kubectl apply --validate=false -f -
  environment:
    name: staging
    url: https://stg.bencloud-stage.aws.epa.gov/api
    kubernetes:
      namespace: benmap-stg

