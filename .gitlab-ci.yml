# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

stages:
  - code_build
  - image_build
  - image_scan
  - application_scan
  - deploy

include:
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
#  - template: Security/SAST.gitlab-ci.yml
#  - template: Dependency-Scanning.gitlab-ci.yml

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

build_jars:
  stage: code_build
  image: gradle:alpine
  tags:
    - benmapdevgitlab
  script:
    - gradle fatJar
    - gradle taskRunnerFatJar
    - cp build/libs/BenCloudServer.jar BenCloudServer.jar
    - cp build/libs/BenCloudTaskRunner.jar BenCloudTaskRunner.jar
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - BenCloudServer.jar
      - BenCloudTaskRunner.jar
      - bencloud-server.properties

build_server_image:
  stage: image_build
  tags:
    - benmapdevgitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudserver/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_SHORT_SHA
  dependencies:
    - build_jars

build_runner_image:
  stage: image_build
  tags:
    - benmapdevgitlab
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/bencloudtaskrunner/Dockerfile --destination $CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_SHORT_SHA
  dependencies:
    - build_jars

prisma_cloud_compute_scan:
  stage: image_scan
  extends:
    - .pcs_compute_scan
  tags:
    - twistcli
  when: manual
  allow_failure: true
  parallel:
    matrix:
      - prisma_cloud_scan_image: ["$CI_REGISTRY_IMAGE/bencloudserver:$CI_COMMIT_SHORT_SHA","$CI_REGISTRY_IMAGE/bencloudtaskrunner:$CI_COMMIT_SHORT_SHA"]
  variables:
      prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
      GIT_STRATEGY: clone
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
    - docker pull $prisma_cloud_scan_image
    - ./image_scan.sh  

net_sparker:
  stage: application_scan
  tags:
    - devsecops-instance
  when: manual
  image: docker:20.10
  # This needs a NetSparker image to invoke the scan.
  script:
    - echo "Simulate a NetSparker scan."

deploy_development:
  stage: deploy
  only: 
    - develop
  tags:
    - benmapdevgitlab
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster benmap-shared-dev00 --server="$KUBE_URL"
    - kubectl config set-cluster benmap-shared-dev00 --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=benmap-shared-dev00 --user=gitlab --namespace="benmap-dev"
    - kubectl config use-context default
    - envsubst < k8s/bencloud-server.yml | kubectl apply -f -
  environment:
    name: development
    url: https://dev.bencloud-dev.aws.epa.gov/api
    kubernetes:
      namespace: benmap-dev

